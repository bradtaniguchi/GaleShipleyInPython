
External documentation about this problem can be found here:
https://en.wikipedia.org/wiki/Stable_marriage_problem
=========
Initially all m <- M and w <- W are free

While there is a man m, who is free and hasn't proposed to every woman
    Choose such a man m 
    Let w be the highest-ranked woman in m's preference list
        to whome m has not yet proposed
    If w is free then (m,w) become engaged

    Else w is currently engaged to m'
        If w prefers m' to m then
            m remains free
        Else w prefers m to m'
            (m,w) become engaged
            m' becomes free
        Endif
    Endif
Endwhile
Return the set S of engaged pairs

=====
NOTES:
1.1 w remains engaged from the point at which she receives her first propsal.
and the sequence of partners she gets, gets better and better

The man goes from free, to engaged, but 

1.2 The sequence of women to whom m proposes gets worse and worse
in terms of his preference list (that sucks)

1.3 the G-S Algorithm terminates after at most N^2 iterations of the While loop.
===
PROOF
A good strategy for upper-bounding the running time of an algorithm,
as we are trying to do, is to find a measure of progress.
If we are getting closer to completion.

In the case of the present algorithm, each iteration consists of some man proposing
(for the only time) to a woman he has never propsed to before. 
So if we let P(t) denote the set of pairs (m,w) such that m has proposed to 
w by the end of interation t, we see that for all t, the size of p(t+1) is greater than the
size of p(t), There are only n^2 combinations. 
..... (complicated)


1.4 If m is free at some point in the execution of the algorith,, then there is a women he
has not propsed to.

PROOF:
Generally if M hasn;t proposed, but all women are taken. Then by 1.1 each of the n women
is engaged at this time. Since they are pairs there must be n engaged men at this point.
But there are only n men in total, and m is not engaged, so its a contradiction.

1.5 The set S returned at termination is a perfect matching.

1.6 Consider an execution of the G-S algorithm that returns a set of pairs S.
The set S is a stable matching.

====
PERSONAL NOTE:
It seems like the way this algorithm works, is ordering the prefernce of each 
"Side" and marching to the "center" of each order. 
Concurrently between all of one side. 

I can see how this takes a lot of time, and isn't effecient.

Along with this, suiters (the men) can propose to anyone. 
But the women, or reviewers can only accept a subset of those who propse to them.
Thus making giving them less options overall

======
Extensions

We began by defining the notion of a stable matching.
We have proven that the G-S algorithm actually constructs one.
There can be multiple stable matchings.

There is unfairness, in that if all men's preferences mesh perfectly, then 
the women aren't even checked!

NOT ALL EXECUTIONS ARE THE SAME, which is why it is said as such in 1.6
We can choose ANY man left, there isn't an order.

BUT!
All executions Yield the same matching.
-Each man results in best possible partner

1.7 Every Execution of the G-S algorithm results in the set S*.
----
PROOF
*to long*


1.8 In the stable matching S*, each woman is paired with her worst valid
partner
========


